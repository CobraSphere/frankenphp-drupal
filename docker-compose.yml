# Drupal with PostgreSQL
#
# Access via "https://localhost"
#
# During initial Drupal setup,
# Database type: PostgreSQL
# Database name: postgres
# Database username: postgres
# Database password: example
# ADVANCED OPTIONS; Database host: postgres

version: '3.4'

services:
  drupal:
    build:
      context: ./drupal
      target: app_drupal
      args: # arguments used at docker build time (used by Dockerfile)
        # https://www.drupal.org/project/drupal/releases/10.0.0
        DRUPAL_PROJECT: ${DRUPAL_PROJECT:-drupal/recommended-project}
        DRUPAL_VERSION: ${DRUPAL_VERSION:-10.0.0}
        DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-example}@postgres:5432/${POSTGRES_DB:-postgres}?serverVersion=${POSTGRES_VERSION:-14}
        DRUPAL_ADMIN_PASSWORD: ${DRUPAL_ADMIN_PASSWORD:-admin}
    depends_on:
      - database
    ports:
      - 80:80
      - 443:443
    volumes:
      - /app/public/modules
      - /app/public/profiles
      - /app/public/themes
      # this takes advantage of the feature in Docker that a new anonymous
      # volume (which is what we're creating here) will be initialized with the
      # existing content of the image at the same location
      - /app/public/sites
    restart: always
    environment:
      DRUPAL_PROJECT: ${DRUPAL_PROJECT:-drupal/recommended-project}
      DRUPAL_VERSION: ${DRUPAL_VERSION:-10.0.0}
      DRUPAL_ADMIN_PASSWORD: ${DRUPAL_ADMIN_PASSWORD:-admin}
      DATABASE_URL: pgsql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-example}@database:5432/${POSTGRES_DB:-postgres}?serverVersion=${POSTGRES_VERSION:-14}

  database:
    build:
      context: ./drupal
      target: app_database
      args:
        POSTGRES_VERSION: 14
    environment:
      POSTGRES_PASSWORD: example
    restart: always
